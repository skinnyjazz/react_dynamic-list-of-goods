{"version":3,"sources":["GoodsList.tsx","api/goods.ts","types/Good.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","map","good","style","color","name","id","getAll","fetch","then","response","json","QueryType","getSomeGoods","numOfGoods","sort","nextGood","localeCompare","splice","getGoodsSortedByColor","filter","App","useState","setGoods","quaryType","useRef","getAllGoods","a","current","ALL","Error","getFiveGoods","SOME","getRedGoods","COLOR","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"qPAOaA,EAAuB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OACRC,MAAO,CAAEC,MAAOF,EAAKE,OAHvB,SAKGF,EAAKG,MAJDH,EAAKI,UCNX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,ICJKC,EDICC,EAAe,SAACC,GAC3B,OAAOP,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZe,MAAK,SAACb,EAAMc,GAAP,OAAoBd,EAAKG,KAAKY,cAAcD,EAASX,SAC1Da,OAAO,EAAGJ,OAGJK,EAAwB,SAACf,GACpC,OAAOG,IACJE,MAAK,SAAAT,GAAK,OAAIA,EAAMoB,QAAO,SAAAlB,GAAI,OAAIA,EAAKE,QAAUA,U,SCb3CQ,O,aAAAA,I,eAAAA,I,kBAAAA,M,KCCL,IAAMS,EAAU,WACrB,MAA0BC,mBAAiB,IAA3C,mBAAOtB,EAAP,KAAcuB,EAAd,KACMC,EAAYC,iBAAyB,MAErCC,EAAW,uCAAG,sBAAAC,EAAA,yDACdH,EAAUI,UAAYhB,EAAUiB,IADlB,sEAMhBN,EANgB,SAMDhB,IANC,kCAOhBiB,EAAUI,QAAUhB,EAAUiB,IAPd,wDASVC,MAAM,iBATI,0DAAH,qDAaXC,EAAY,uCAAG,sBAAAJ,EAAA,yDACfH,EAAUI,UAAYhB,EAAUoB,KADjB,sEAMjBT,EANiB,SAMFV,EAAa,GANX,kCAOjBW,EAAUI,QAAUhB,EAAUoB,KAPb,wDASXF,MAAM,iBATK,0DAAH,qDAaZG,EAAW,uCAAG,sBAAAN,EAAA,yDACdH,EAAUI,UAAYhB,EAAUsB,MADlB,sEAMhBX,EANgB,SAMDJ,EAAsB,OANrB,kCAOhBK,EAAUI,QAAUhB,EAAUsB,MAPd,wDASVJ,MAAM,iBATI,0DAAH,qDAajB,OACE,sBAAKK,UAAU,MAAf,UACE,uDAEA,wBACEC,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMX,KAHjB,4BAQA,wBACEU,KAAK,SACL,UAAQ,oBACRC,QAAS,kBAAMN,KAHjB,gCAQA,wBACEK,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMJ,KAHjB,4BAQA,cAAC,EAAD,CAAWjC,MAAOA,QC3ExBsC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7d98a3e8.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ color: good.color }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport const getSomeGoods = (numOfGoods: number): Promise<Good[]> => {\n  return getAll()\n    .then(goods => goods\n      .sort((good, nextGood) => good.name.localeCompare(nextGood.name))\n      .splice(0, numOfGoods));\n};\n\nexport const getGoodsSortedByColor = (color: string) => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === color));\n};\n","export interface Good {\n  id: number;\n  name: string;\n  color: string;\n}\n\nexport enum QueryType {\n  ALL,\n  SOME,\n  COLOR,\n}\n","import { FC, useRef, useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\n\nimport { getAll, getSomeGoods, getGoodsSortedByColor } from './api/goods';\nimport { Good, QueryType } from './types/Good';\n\nexport const App: FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const quaryType = useRef<QueryType | null>(null);\n\n  const getAllGoods = async () => {\n    if (quaryType.current === QueryType.ALL) {\n      return;\n    }\n\n    try {\n      setGoods(await getAll());\n      quaryType.current = QueryType.ALL;\n    } catch {\n      throw Error('Error message');\n    }\n  };\n\n  const getFiveGoods = async () => {\n    if (quaryType.current === QueryType.SOME) {\n      return;\n    }\n\n    try {\n      setGoods(await getSomeGoods(5));\n      quaryType.current = QueryType.SOME;\n    } catch {\n      throw Error('Error message');\n    }\n  };\n\n  const getRedGoods = async () => {\n    if (quaryType.current === QueryType.COLOR) {\n      return;\n    }\n\n    try {\n      setGoods(await getGoodsSortedByColor('red'));\n      quaryType.current = QueryType.COLOR;\n    } catch {\n      throw Error('Error message');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <button\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={() => getAllGoods()}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={() => getFiveGoods()}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={() => getRedGoods()}\n      >\n        Load red goods\n      </button>\n\n      <GoodsList goods={goods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}